{"remainingRequest":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/john/Documents/Projects/Хакатоны/mvd/frontend/src/components/map/Map.vue?vue&type=style&index=0&id=e2cf925c&lang=scss&scoped=true&","dependencies":[{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/src/components/map/Map.vue","mtime":1620583580966},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgpAaW1wb3J0ICdAL3N0eWxlcy9jb21tb24uc2Nzcyc7CkBpbXBvcnQgJ0Avc3R5bGVzL2NvbXBvbmVudHMvbWFwLnNjc3MnOwo="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA","file":"Map.vue","sourceRoot":"src/components/map","sourcesContent":["<template>\n    <yandex-map id=\"map\"\n      :settings=\"settings\"\n      :coords=\"mapCenter\"\n      :zoom=\"10\" \n      :use-object-manager=\"true\"\n      :scrollZoom=\"false\"\n      :controls=\"['zoomControl']\"\n      @map-was-initialized=\"getMapInstance\"\n    >\n    </yandex-map>\n</template>\n\n<style lang=\"scss\" scoped>\n@import '@/styles/common.scss';\n@import '@/styles/components/map.scss';\n</style>\n\n<script>\nimport { yandexMap, ymapMarker } from 'vue-yandex-maps'\nimport { formatedDateTime } from '@/utils/helpers.js'\n\nexport default {\n  name: \"Map\",\n  props: {\n    filterParams: Object\n  },\n  components: {\n    yandexMap,\n    ymapMarker\n  },\n  data() {\n    return {\n      clusterMap: null,\n      settings: {\n        apiKey: 'e70694c3-ce7f-4459-b7f6-be3d53e2cc8e',\n        lang: 'ru_RU',\n        coordorder: 'latlong',\n        version: '2.1',\n      },\n      mapCenter: [59.9370, 30.3089],\n      points: [],\n      objectManager: null\n    }\n  },\n\n  methods: {\n    clickPoint(e) {\n      let target = e.get('objectId')\n      if (this.objectManager.clusters.getById(target)) {\n        let cluster = this.objectManager.clusters.getById(target)\n        let objects = cluster.properties.geoObjects\n        let buf = []\n\n        objects.forEach(element => {\n          buf.push(element.id)\n        })\n        axios.post(`${this.$store.state.backendUrl}/map/some/`,{\n          ids: buf\n        }).then(response => {\n          objects.sort((prev, next) => prev.id - next.id)\n          let clusterData = response.data.sort((prev, next) => prev.id - next.id)\n\n          for(let i=0;i<clusterData.length;i++) {\n            objects[i].properties = {\n              clusterCaption: clusterData[i].address,\n              balloonContentHeader: (clusterData[i].address) ? `<a>${clusterData[i].address}</a>` : `<a>${clusterData[i].address}</a>`,\n              balloonContentBody: clusterData[i].category,\n              balloonContentFooter: formatedDateTime(clusterData[i].datetime), \n            }  \n          }\n          this.objectManager.clusters.state.set('activeObject', cluster)\n          this.objectManager.clusters.state.set('activeObject', objects[0])\n        })\n      }\n      else {\n        let point = this.objectManager.objects.getById(target)\n        axios.get(`${this.$store.state.backendUrl}/map/${target}/`\n        ).then(response => {\n          let coords = point.geometry.coordinates\n          this.clusterMap.balloon.open(coords, {\n            contentBody: response.data.category + \" \" + formatedDateTime(response.data.datetime)\n          })\n        })\n      }\n    },\n\n    async getMapInstance(map) {\n      if(map) {\n        try {\n          this.clusterMap = map\n          this.objectManager = new ymaps.ObjectManager({\n            clusterize: true,\n            gridSize: 32,\n            clusterDisableClickZoom: true\n          })\n          this.clusterMap.geoObjects.events.add('click', (e) => (this.clickPoint(e)))\n\n          try {\n            this.objectManager.add(this.points)\n            this.clusterMap.geoObjects.add(this.objectManager)\n          } catch (error) {\n            console.log('no points!')\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      }\n    },\n  },\n\n  watch: {\n    filterParams: function(filterParams) {\n      this.objectManager.removeAll()\n      this.points = []\n\n      axios.get(`${this.$store.state.backendUrl}/map/`, {\n        params: {\n          category: filterParams.category,\n          region: filterParams.region,\n          light: filterParams.light,\n          datetime_before: filterParams.datetime_before, \n          datetime_after: filterParams.datetime_after,\n          time_group: filterParams.time_group\n        }\n      }\n      ).then(response => {\n          for (let i=0;i<response.data.length;i++){\n            let marker = {\n              type: 'Feature',\n              id: response.data[i][\"id\"],\n              geometry: {\n                  type: 'Point',\n                  coordinates: [response.data[i][\"lat\"], response.data[i][\"long\"]]\n              }\n            }\n            this.points.push(marker)\n          }\n          this.objectManager.add(this.points)\n      })\n    }\n  }\n}\n</script>"]}]}