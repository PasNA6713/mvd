{"remainingRequest":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/john/Documents/Projects/Хакатоны/mvd/frontend/src/components/map/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/src/components/map/Map.vue","mtime":1620583580966},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHlhbmRleE1hcCwgeW1hcE1hcmtlciB9IGZyb20gJ3Z1ZS15YW5kZXgtbWFwcycKaW1wb3J0IHsgZm9ybWF0ZWREYXRlVGltZSB9IGZyb20gJ0AvdXRpbHMvaGVscGVycy5qcycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTWFwIiwKICBwcm9wczogewogICAgZmlsdGVyUGFyYW1zOiBPYmplY3QKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIHlhbmRleE1hcCwKICAgIHltYXBNYXJrZXIKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjbHVzdGVyTWFwOiBudWxsLAogICAgICBzZXR0aW5nczogewogICAgICAgIGFwaUtleTogJ2U3MDY5NGMzLWNlN2YtNDQ1OS1iN2Y2LWJlM2Q1M2UyY2M4ZScsCiAgICAgICAgbGFuZzogJ3J1X1JVJywKICAgICAgICBjb29yZG9yZGVyOiAnbGF0bG9uZycsCiAgICAgICAgdmVyc2lvbjogJzIuMScsCiAgICAgIH0sCiAgICAgIG1hcENlbnRlcjogWzU5LjkzNzAsIDMwLjMwODldLAogICAgICBwb2ludHM6IFtdLAogICAgICBvYmplY3RNYW5hZ2VyOiBudWxsCiAgICB9CiAgfSwKCiAgbWV0aG9kczogewogICAgY2xpY2tQb2ludChlKSB7CiAgICAgIGxldCB0YXJnZXQgPSBlLmdldCgnb2JqZWN0SWQnKQogICAgICBpZiAodGhpcy5vYmplY3RNYW5hZ2VyLmNsdXN0ZXJzLmdldEJ5SWQodGFyZ2V0KSkgewogICAgICAgIGxldCBjbHVzdGVyID0gdGhpcy5vYmplY3RNYW5hZ2VyLmNsdXN0ZXJzLmdldEJ5SWQodGFyZ2V0KQogICAgICAgIGxldCBvYmplY3RzID0gY2x1c3Rlci5wcm9wZXJ0aWVzLmdlb09iamVjdHMKICAgICAgICBsZXQgYnVmID0gW10KCiAgICAgICAgb2JqZWN0cy5mb3JFYWNoKGVsZW1lbnQgPT4gewogICAgICAgICAgYnVmLnB1c2goZWxlbWVudC5pZCkKICAgICAgICB9KQogICAgICAgIGF4aW9zLnBvc3QoYCR7dGhpcy4kc3RvcmUuc3RhdGUuYmFja2VuZFVybH0vbWFwL3NvbWUvYCx7CiAgICAgICAgICBpZHM6IGJ1ZgogICAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgb2JqZWN0cy5zb3J0KChwcmV2LCBuZXh0KSA9PiBwcmV2LmlkIC0gbmV4dC5pZCkKICAgICAgICAgIGxldCBjbHVzdGVyRGF0YSA9IHJlc3BvbnNlLmRhdGEuc29ydCgocHJldiwgbmV4dCkgPT4gcHJldi5pZCAtIG5leHQuaWQpCgogICAgICAgICAgZm9yKGxldCBpPTA7aTxjbHVzdGVyRGF0YS5sZW5ndGg7aSsrKSB7CiAgICAgICAgICAgIG9iamVjdHNbaV0ucHJvcGVydGllcyA9IHsKICAgICAgICAgICAgICBjbHVzdGVyQ2FwdGlvbjogY2x1c3RlckRhdGFbaV0uYWRkcmVzcywKICAgICAgICAgICAgICBiYWxsb29uQ29udGVudEhlYWRlcjogKGNsdXN0ZXJEYXRhW2ldLmFkZHJlc3MpID8gYDxhPiR7Y2x1c3RlckRhdGFbaV0uYWRkcmVzc308L2E+YCA6IGA8YT4ke2NsdXN0ZXJEYXRhW2ldLmFkZHJlc3N9PC9hPmAsCiAgICAgICAgICAgICAgYmFsbG9vbkNvbnRlbnRCb2R5OiBjbHVzdGVyRGF0YVtpXS5jYXRlZ29yeSwKICAgICAgICAgICAgICBiYWxsb29uQ29udGVudEZvb3RlcjogZm9ybWF0ZWREYXRlVGltZShjbHVzdGVyRGF0YVtpXS5kYXRldGltZSksIAogICAgICAgICAgICB9ICAKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMub2JqZWN0TWFuYWdlci5jbHVzdGVycy5zdGF0ZS5zZXQoJ2FjdGl2ZU9iamVjdCcsIGNsdXN0ZXIpCiAgICAgICAgICB0aGlzLm9iamVjdE1hbmFnZXIuY2x1c3RlcnMuc3RhdGUuc2V0KCdhY3RpdmVPYmplY3QnLCBvYmplY3RzWzBdKQogICAgICAgIH0pCiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgbGV0IHBvaW50ID0gdGhpcy5vYmplY3RNYW5hZ2VyLm9iamVjdHMuZ2V0QnlJZCh0YXJnZXQpCiAgICAgICAgYXhpb3MuZ2V0KGAke3RoaXMuJHN0b3JlLnN0YXRlLmJhY2tlbmRVcmx9L21hcC8ke3RhcmdldH0vYAogICAgICAgICkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICBsZXQgY29vcmRzID0gcG9pbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMKICAgICAgICAgIHRoaXMuY2x1c3Rlck1hcC5iYWxsb29uLm9wZW4oY29vcmRzLCB7CiAgICAgICAgICAgIGNvbnRlbnRCb2R5OiByZXNwb25zZS5kYXRhLmNhdGVnb3J5ICsgIiAiICsgZm9ybWF0ZWREYXRlVGltZShyZXNwb25zZS5kYXRhLmRhdGV0aW1lKQogICAgICAgICAgfSkKICAgICAgICB9KQogICAgICB9CiAgICB9LAoKICAgIGFzeW5jIGdldE1hcEluc3RhbmNlKG1hcCkgewogICAgICBpZihtYXApIHsKICAgICAgICB0cnkgewogICAgICAgICAgdGhpcy5jbHVzdGVyTWFwID0gbWFwCiAgICAgICAgICB0aGlzLm9iamVjdE1hbmFnZXIgPSBuZXcgeW1hcHMuT2JqZWN0TWFuYWdlcih7CiAgICAgICAgICAgIGNsdXN0ZXJpemU6IHRydWUsCiAgICAgICAgICAgIGdyaWRTaXplOiAzMiwKICAgICAgICAgICAgY2x1c3RlckRpc2FibGVDbGlja1pvb206IHRydWUKICAgICAgICAgIH0pCiAgICAgICAgICB0aGlzLmNsdXN0ZXJNYXAuZ2VvT2JqZWN0cy5ldmVudHMuYWRkKCdjbGljaycsIChlKSA9PiAodGhpcy5jbGlja1BvaW50KGUpKSkKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLm9iamVjdE1hbmFnZXIuYWRkKHRoaXMucG9pbnRzKQogICAgICAgICAgICB0aGlzLmNsdXN0ZXJNYXAuZ2VvT2JqZWN0cy5hZGQodGhpcy5vYmplY3RNYW5hZ2VyKQogICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIHBvaW50cyEnKQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcikKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgfSwKCiAgd2F0Y2g6IHsKICAgIGZpbHRlclBhcmFtczogZnVuY3Rpb24oZmlsdGVyUGFyYW1zKSB7CiAgICAgIHRoaXMub2JqZWN0TWFuYWdlci5yZW1vdmVBbGwoKQogICAgICB0aGlzLnBvaW50cyA9IFtdCgogICAgICBheGlvcy5nZXQoYCR7dGhpcy4kc3RvcmUuc3RhdGUuYmFja2VuZFVybH0vbWFwL2AsIHsKICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgIGNhdGVnb3J5OiBmaWx0ZXJQYXJhbXMuY2F0ZWdvcnksCiAgICAgICAgICByZWdpb246IGZpbHRlclBhcmFtcy5yZWdpb24sCiAgICAgICAgICBsaWdodDogZmlsdGVyUGFyYW1zLmxpZ2h0LAogICAgICAgICAgZGF0ZXRpbWVfYmVmb3JlOiBmaWx0ZXJQYXJhbXMuZGF0ZXRpbWVfYmVmb3JlLCAKICAgICAgICAgIGRhdGV0aW1lX2FmdGVyOiBmaWx0ZXJQYXJhbXMuZGF0ZXRpbWVfYWZ0ZXIsCiAgICAgICAgICB0aW1lX2dyb3VwOiBmaWx0ZXJQYXJhbXMudGltZV9ncm91cAogICAgICAgIH0KICAgICAgfQogICAgICApLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgZm9yIChsZXQgaT0wO2k8cmVzcG9uc2UuZGF0YS5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgbGV0IG1hcmtlciA9IHsKICAgICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsCiAgICAgICAgICAgICAgaWQ6IHJlc3BvbnNlLmRhdGFbaV1bImlkIl0sCiAgICAgICAgICAgICAgZ2VvbWV0cnk6IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ1BvaW50JywKICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtyZXNwb25zZS5kYXRhW2ldWyJsYXQiXSwgcmVzcG9uc2UuZGF0YVtpXVsibG9uZyJdXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnBvaW50cy5wdXNoKG1hcmtlcikKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMub2JqZWN0TWFuYWdlci5hZGQodGhpcy5wb2ludHMpCiAgICAgIH0pCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"Map.vue","sourceRoot":"src/components/map","sourcesContent":["<template>\n    <yandex-map id=\"map\"\n      :settings=\"settings\"\n      :coords=\"mapCenter\"\n      :zoom=\"10\" \n      :use-object-manager=\"true\"\n      :scrollZoom=\"false\"\n      :controls=\"['zoomControl']\"\n      @map-was-initialized=\"getMapInstance\"\n    >\n    </yandex-map>\n</template>\n\n<style lang=\"scss\" scoped>\n@import '@/styles/common.scss';\n@import '@/styles/components/map.scss';\n</style>\n\n<script>\nimport { yandexMap, ymapMarker } from 'vue-yandex-maps'\nimport { formatedDateTime } from '@/utils/helpers.js'\n\nexport default {\n  name: \"Map\",\n  props: {\n    filterParams: Object\n  },\n  components: {\n    yandexMap,\n    ymapMarker\n  },\n  data() {\n    return {\n      clusterMap: null,\n      settings: {\n        apiKey: 'e70694c3-ce7f-4459-b7f6-be3d53e2cc8e',\n        lang: 'ru_RU',\n        coordorder: 'latlong',\n        version: '2.1',\n      },\n      mapCenter: [59.9370, 30.3089],\n      points: [],\n      objectManager: null\n    }\n  },\n\n  methods: {\n    clickPoint(e) {\n      let target = e.get('objectId')\n      if (this.objectManager.clusters.getById(target)) {\n        let cluster = this.objectManager.clusters.getById(target)\n        let objects = cluster.properties.geoObjects\n        let buf = []\n\n        objects.forEach(element => {\n          buf.push(element.id)\n        })\n        axios.post(`${this.$store.state.backendUrl}/map/some/`,{\n          ids: buf\n        }).then(response => {\n          objects.sort((prev, next) => prev.id - next.id)\n          let clusterData = response.data.sort((prev, next) => prev.id - next.id)\n\n          for(let i=0;i<clusterData.length;i++) {\n            objects[i].properties = {\n              clusterCaption: clusterData[i].address,\n              balloonContentHeader: (clusterData[i].address) ? `<a>${clusterData[i].address}</a>` : `<a>${clusterData[i].address}</a>`,\n              balloonContentBody: clusterData[i].category,\n              balloonContentFooter: formatedDateTime(clusterData[i].datetime), \n            }  \n          }\n          this.objectManager.clusters.state.set('activeObject', cluster)\n          this.objectManager.clusters.state.set('activeObject', objects[0])\n        })\n      }\n      else {\n        let point = this.objectManager.objects.getById(target)\n        axios.get(`${this.$store.state.backendUrl}/map/${target}/`\n        ).then(response => {\n          let coords = point.geometry.coordinates\n          this.clusterMap.balloon.open(coords, {\n            contentBody: response.data.category + \" \" + formatedDateTime(response.data.datetime)\n          })\n        })\n      }\n    },\n\n    async getMapInstance(map) {\n      if(map) {\n        try {\n          this.clusterMap = map\n          this.objectManager = new ymaps.ObjectManager({\n            clusterize: true,\n            gridSize: 32,\n            clusterDisableClickZoom: true\n          })\n          this.clusterMap.geoObjects.events.add('click', (e) => (this.clickPoint(e)))\n\n          try {\n            this.objectManager.add(this.points)\n            this.clusterMap.geoObjects.add(this.objectManager)\n          } catch (error) {\n            console.log('no points!')\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      }\n    },\n  },\n\n  watch: {\n    filterParams: function(filterParams) {\n      this.objectManager.removeAll()\n      this.points = []\n\n      axios.get(`${this.$store.state.backendUrl}/map/`, {\n        params: {\n          category: filterParams.category,\n          region: filterParams.region,\n          light: filterParams.light,\n          datetime_before: filterParams.datetime_before, \n          datetime_after: filterParams.datetime_after,\n          time_group: filterParams.time_group\n        }\n      }\n      ).then(response => {\n          for (let i=0;i<response.data.length;i++){\n            let marker = {\n              type: 'Feature',\n              id: response.data[i][\"id\"],\n              geometry: {\n                  type: 'Point',\n                  coordinates: [response.data[i][\"lat\"], response.data[i][\"long\"]]\n              }\n            }\n            this.points.push(marker)\n          }\n          this.objectManager.add(this.points)\n      })\n    }\n  }\n}\n</script>"]}]}