{"remainingRequest":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/john/Documents/Projects/Хакатоны/mvd/frontend/src/components/map/ClusterMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/src/components/map/ClusterMap.vue","mtime":1620586744637},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/john/Documents/Projects/Хакатоны/mvd/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHlhbmRleE1hcCwgeW1hcE1hcmtlciB9IGZyb20gJ3Z1ZS15YW5kZXgtbWFwcycKaW1wb3J0IHsgZm9ybWF0ZWREYXRlVGltZSB9IGZyb20gJ0AvdXRpbHMvaGVscGVycy5qcycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQ2x1c3Rlck1hcCIsCiAgCiAgcHJvcHM6IHsKICAgIGZpbHRlclBhcmFtczogT2JqZWN0CiAgfSwKCiAgY29tcG9uZW50czogewogICAgeWFuZGV4TWFwLAogICAgeW1hcE1hcmtlcgogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjbHVzdGVyTWFwOiBudWxsLAogICAgICBzZXR0aW5nczogewogICAgICAgIGFwaUtleTogJ2U3MDY5NGMzLWNlN2YtNDQ1OS1iN2Y2LWJlM2Q1M2UyY2M4ZScsCiAgICAgICAgbGFuZzogJ3J1X1JVJywKICAgICAgICBjb29yZG9yZGVyOiAnbGF0bG9uZycsCiAgICAgICAgdmVyc2lvbjogJzIuMScsCiAgICAgIH0sCiAgICAgIG1hcENlbnRlcjogWzU5LjkzNzAsIDMwLjMwODldLAogICAgICBjbHVzdGVyczogW10sCiAgICAgIHBvaW50czogW10sCiAgICAgIGNsdXN0ZXJDb3VudGVyOiAxLAogICAgICBvYmplY3RNYW5hZ2VyOiBudWxsLAoKICAgICAgcHJlc3NlZDogZmFsc2UsCiAgICAgIHVzZXJQb2ludDogewogICAgICAgIGNvb3JkczogbnVsbCwKICAgICAgICBwb2ludHM6IG51bGwsCiAgICAgIH0sCiAgICAgIHVzZXJQbGFjZW1hcms6IG51bGwKICAgIH0KICB9LAoKICBtZXRob2RzOiB7CiAgICBkcmF3VGFibGUoY2x1c3RlciwgY2lkKSB7CiAgICAgIGZvcihsZXQgaT0wO2k8Y2x1c3Rlci5sZW5ndGg7aSsrKSB7CiAgICAgICAgY2x1c3RlcltpXS5kYXRldGltZSA9IGZvcm1hdGVkRGF0ZVRpbWUoY2x1c3RlcltpXS5kYXRldGltZSkKICAgICAgICBjbHVzdGVyW2ldLmNpZCA9IGNpZAogICAgICB9CgogICAgICB0aGlzLiRlbWl0KCdnZXQtdGFibGUnLGNsdXN0ZXIpCiAgICB9LAoKICAgIGNsaWNrUG9pbnQoZSkgewogICAgICBsZXQgdGFyZ2V0ID0gZS5nZXQoJ29iamVjdElkJykKICAgICAgbGV0IHBvaW50ID0gdGhpcy5vYmplY3RNYW5hZ2VyLm9iamVjdHMuZ2V0QnlJZCh0YXJnZXQpCgogICAgICBheGlvcy5wb3N0KGAke3RoaXMuJHN0b3JlLnN0YXRlLmJhY2tlbmRVcmx9L21hcC9zb21lL2AsewogICAgICAgIGlkczogcG9pbnQucHJvcGVydGllcy5wb2ludHMKICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgdGhpcy5kcmF3VGFibGUocmVzcG9uc2UuZGF0YSwgcG9pbnQuaWQpCgogICAgICAgIGxldCBzY3JvbGxFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpOwogICAgICAgIHNjcm9sbEVsZW1lbnQuc2Nyb2xsQm90dG9tID0gc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQ7CiAgICAgICAgdGhpcy4kdnVldGlmeS5nb1RvKHNjcm9sbEVsZW1lbnQpOwogICAgICB9KQogICAgfSwKCiAgICBhc3luYyBnZXRNYXBJbnN0YW5jZShtYXApIHsKICAgICAgaWYobWFwKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoaXMuY2x1c3Rlck1hcCA9IG1hcAogICAgICAgICAgdGhpcy5vYmplY3RNYW5hZ2VyID0gbmV3IHltYXBzLk9iamVjdE1hbmFnZXIoewogICAgICAgICAgICBjbHVzdGVyaXplOiBmYWxzZSwKICAgICAgICAgICAgZ3JpZFNpemU6IDMyLAogICAgICAgICAgICBjbHVzdGVyRGlzYWJsZUNsaWNrWm9vbTogdHJ1ZQogICAgICAgICAgfSkKICAgICAgICAgIHRoaXMuY2x1c3Rlck1hcC5nZW9PYmplY3RzLmV2ZW50cy5hZGQoJ2NsaWNrJywgKGUpID0+ICh0aGlzLmNsaWNrUG9pbnQoZSkpKQogICAgICAgICAgdGhpcy5jbHVzdGVyTWFwLmV2ZW50cy5hZGQoJ2NsaWNrJywgKGUpID0+ICh0aGlzLmNsaWNrVXNlclBvaW50KGUpKSkKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLm9iamVjdE1hbmFnZXIuYWRkKHRoaXMuY2x1c3RlcnMpCiAgICAgICAgICAgIHRoaXMuY2x1c3Rlck1hcC5nZW9PYmplY3RzLmFkZCh0aGlzLm9iamVjdE1hbmFnZXIpCiAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnbm8gY2x1c3RlcnMhJykKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpCiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIGFzeW5jIGNsaWNrVXNlclBvaW50KGUpIHsKICAgICAgaWYgKHRoaXMucHJlc3NlZCkgewogICAgICAgICAgaWYgKHRoaXMudXNlclBsYWNlbWFyaykgewogICAgICAgICAgICB0aGlzLmNsdXN0ZXJNYXAuZ2VvT2JqZWN0cy5yZW1vdmUodGhpcy51c2VyUGxhY2VtYXJrKQogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMudXNlclBvaW50LmNvb3JkcyA9IGUuZ2V0KCdjb29yZHMnKQoKICAgICAgICAgIGF3YWl0IGF4aW9zLnBvc3QoYCR7dGhpcy4kc3RvcmUuc3RhdGUuYmFja2VuZFVybH0vbWFwL3JhbmdlLz9jYXRlZ29yeT3Qo9Cx0LjQudGB0YLQstC+YCwgewogICAgICAgICAgICAgIGxhdDogdGhpcy51c2VyUG9pbnQuY29vcmRzWzBdLAogICAgICAgICAgICAgIGxvbmc6IHRoaXMudXNlclBvaW50LmNvb3Jkc1sxXQogICAgICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgICAgdGhpcy51c2VyUGxhY2VtYXJrID0gbmV3IHltYXBzLlBsYWNlbWFyayh0aGlzLnVzZXJQb2ludC5jb29yZHMpCiAgICAgICAgICAgICAgdGhpcy5jbHVzdGVyTWFwLmdlb09iamVjdHMuYWRkKHRoaXMudXNlclBsYWNlbWFyaykKICAgICAgICAgICAgICB0aGlzLnByZXNzZWQgPSBmYWxzZQogICAgICAgICAgfSkKICAgICAgICB9CiAgICB9LAoKICAgIGNoYW5nZUFjY2Vzc1RvTWFwKCkgewogICAgICB0aGlzLnByZXNzZWQgPSAhdGhpcy5wcmVzc2VkCiAgICB9LAoKICAgIGRlbGV0ZVVzZXJQb2ludCgpIHsKICAgICAgdGhpcy5jbHVzdGVyTWFwLmdlb09iamVjdHMucmVtb3ZlKHRoaXMudXNlclBsYWNlbWFyaykKICAgICAgdGhpcy51c2VyUGxhY2VtYXJrID0gbnVsbAogICAgfSwKICB9LAoKICB3YXRjaDogewogICAgZmlsdGVyUGFyYW1zOiBmdW5jdGlvbihmaWx0ZXJQYXJhbXMpIHsKICAgICAgdGhpcy5vYmplY3RNYW5hZ2VyLnJlbW92ZUFsbCgpCiAgICAgIHRoaXMuY2x1c3RlcnMgPSBbXQoKICAgICAgYXhpb3MuZ2V0KGAke3RoaXMuJHN0b3JlLnN0YXRlLmJhY2tlbmRVcmx9L2NsdXN0ZXIvJHtmaWx0ZXJQYXJhbXMuY2x1c3Rlcl9xdW9udGl0eX0vYCwgewogICAgICAgIHBhcmFtczogewogICAgICAgICAgY2F0ZWdvcnk6IGZpbHRlclBhcmFtcy5jYXRlZ29yeSwKICAgICAgICAgIHJlZ2lvbjogZmlsdGVyUGFyYW1zLnJlZ2lvbiwKICAgICAgICAgIGxpZ2h0OiBmaWx0ZXJQYXJhbXMubGlnaHQsCiAgICAgICAgICBkYXRldGltZV9iZWZvcmU6IGZpbHRlclBhcmFtcy5kYXRldGltZV9iZWZvcmUsIAogICAgICAgICAgZGF0ZXRpbWVfYWZ0ZXI6IGZpbHRlclBhcmFtcy5kYXRldGltZV9hZnRlciwKICAgICAgICAgIHRpbWVfZ3JvdXA6IGZpbHRlclBhcmFtcy50aW1lX2dyb3VwCiAgICAgICAgfQogICAgICB9CiAgICAgICkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxyZXNwb25zZS5kYXRhLmxlbmd0aDtpKyspewogICAgICAgICAgICAgIGxldCBjbHVzdGVyID0gewogICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLAogICAgICAgICAgICAgICAgaWQ6IHRoaXMuY2x1c3RlckNvdW50ZXIsCiAgICAgICAgICAgICAgICBnZW9tZXRyeTogewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQb2ludCcsCiAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtyZXNwb25zZS5kYXRhW2ldWyJsYXQiXSwgcmVzcG9uc2UuZGF0YVtpXVsibG9uZyJdXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsKICAgICAgICAgICAgICAgICAgICBwb2ludHM6IHJlc3BvbnNlLmRhdGFbaV1bInBvaW50cyJdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgIHByZXNldDogImlzbGFuZHMjZG90SWNvbiIsCiAgICAgICAgICAgICAgICAgICAgaWNvbkNvbG9yOiAicmVkIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAKICAgICAgICAgICAgICB0aGlzLmNsdXN0ZXJDb3VudGVyICs9IDEKICAgICAgICAgICAgICB0aGlzLmNsdXN0ZXJzLnB1c2goY2x1c3RlcikKICAgICAgICAgICAgICB0aGlzLnBvaW50cy5wdXNoKC4uLmNsdXN0ZXIucHJvcGVydGllcy5wb2ludHMpCiAgICAgICAgICAgIH0KICAgICAgICAgIAogICAgICAgICAgdGhpcy5vYmplY3RNYW5hZ2VyLmFkZCh0aGlzLmNsdXN0ZXJzKQogICAgICAgICAgYXhpb3MucG9zdChgJHt0aGlzLiRzdG9yZS5zdGF0ZS5iYWNrZW5kVXJsfS9tYXAvc29tZS9gLHsKICAgICAgICAgICAgaWRzOiB0aGlzLnBvaW50cwogICAgICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8cmVzcG9uc2UuZGF0YS5sZW5ndGg7aSsrKSByZXNwb25zZS5kYXRhW2ldLmRhdGV0aW1lID0gZm9ybWF0ZWREYXRlVGltZShyZXNwb25zZS5kYXRhW2ldLmRhdGV0aW1lKQogICAgICAgICAgICB0aGlzLiRlbWl0KCdnZXQtdGFibGUnLHJlc3BvbnNlLmRhdGEpCiAgICAgICAgICB9KQogICAgICB9KQogICAgfQogIH0KfQo="},{"version":3,"sources":["ClusterMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"ClusterMap.vue","sourceRoot":"src/components/map","sourcesContent":["<template>\n    <yandex-map id=\"map\"\n      :settings=\"settings\"\n      :coords=\"mapCenter\"\n      :zoom=\"10\" \n      :use-object-manager=\"true\"\n      :scrollZoom=\"false\"\n      :controls=\"['zoomControl']\"\n      @map-was-initialized=\"getMapInstance\"\n    >\n    </yandex-map>\n</template>\n\n<style lang=\"scss\" scoped>\n@import '@/styles/components/map.scss';\n</style>\n\n<script>\nimport { yandexMap, ymapMarker } from 'vue-yandex-maps'\nimport { formatedDateTime } from '@/utils/helpers.js'\n\nexport default {\n  name: \"ClusterMap\",\n  \n  props: {\n    filterParams: Object\n  },\n\n  components: {\n    yandexMap,\n    ymapMarker\n  },\n\n  data() {\n    return {\n      clusterMap: null,\n      settings: {\n        apiKey: 'e70694c3-ce7f-4459-b7f6-be3d53e2cc8e',\n        lang: 'ru_RU',\n        coordorder: 'latlong',\n        version: '2.1',\n      },\n      mapCenter: [59.9370, 30.3089],\n      clusters: [],\n      points: [],\n      clusterCounter: 1,\n      objectManager: null,\n\n      pressed: false,\n      userPoint: {\n        coords: null,\n        points: null,\n      },\n      userPlacemark: null\n    }\n  },\n\n  methods: {\n    drawTable(cluster, cid) {\n      for(let i=0;i<cluster.length;i++) {\n        cluster[i].datetime = formatedDateTime(cluster[i].datetime)\n        cluster[i].cid = cid\n      }\n\n      this.$emit('get-table',cluster)\n    },\n\n    clickPoint(e) {\n      let target = e.get('objectId')\n      let point = this.objectManager.objects.getById(target)\n\n      axios.post(`${this.$store.state.backendUrl}/map/some/`,{\n        ids: point.properties.points\n      }).then(response => {\n        this.drawTable(response.data, point.id)\n\n        let scrollElement = document.getElementById('map');\n        scrollElement.scrollBottom = scrollElement.scrollHeight;\n        this.$vuetify.goTo(scrollElement);\n      })\n    },\n\n    async getMapInstance(map) {\n      if(map) {\n        try {\n          this.clusterMap = map\n          this.objectManager = new ymaps.ObjectManager({\n            clusterize: false,\n            gridSize: 32,\n            clusterDisableClickZoom: true\n          })\n          this.clusterMap.geoObjects.events.add('click', (e) => (this.clickPoint(e)))\n          this.clusterMap.events.add('click', (e) => (this.clickUserPoint(e)))\n\n          try {\n            this.objectManager.add(this.clusters)\n            this.clusterMap.geoObjects.add(this.objectManager)\n          } catch (error) {\n            console.log('no clusters!')\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      }\n    },\n\n    async clickUserPoint(e) {\n      if (this.pressed) {\n          if (this.userPlacemark) {\n            this.clusterMap.geoObjects.remove(this.userPlacemark)\n          }\n\n          this.userPoint.coords = e.get('coords')\n\n          await axios.post(`${this.$store.state.backendUrl}/map/range/?category=Убийство`, {\n              lat: this.userPoint.coords[0],\n              long: this.userPoint.coords[1]\n          }).then(response => {\n              this.userPlacemark = new ymaps.Placemark(this.userPoint.coords)\n              this.clusterMap.geoObjects.add(this.userPlacemark)\n              this.pressed = false\n          })\n        }\n    },\n\n    changeAccessToMap() {\n      this.pressed = !this.pressed\n    },\n\n    deleteUserPoint() {\n      this.clusterMap.geoObjects.remove(this.userPlacemark)\n      this.userPlacemark = null\n    },\n  },\n\n  watch: {\n    filterParams: function(filterParams) {\n      this.objectManager.removeAll()\n      this.clusters = []\n\n      axios.get(`${this.$store.state.backendUrl}/cluster/${filterParams.cluster_quontity}/`, {\n        params: {\n          category: filterParams.category,\n          region: filterParams.region,\n          light: filterParams.light,\n          datetime_before: filterParams.datetime_before, \n          datetime_after: filterParams.datetime_after,\n          time_group: filterParams.time_group\n        }\n      }\n      ).then(response => {\n            for (let i=0; i<response.data.length;i++){\n              let cluster = {\n                type: 'Feature',\n                id: this.clusterCounter,\n                geometry: {\n                    type: 'Point',\n                    coordinates: [response.data[i][\"lat\"], response.data[i][\"long\"]]\n                },\n                properties: {\n                    points: response.data[i][\"points\"]\n                },\n                options: {\n                    preset: \"islands#dotIcon\",\n                    iconColor: \"red\"\n                }\n              }\n              \n              this.clusterCounter += 1\n              this.clusters.push(cluster)\n              this.points.push(...cluster.properties.points)\n            }\n          \n          this.objectManager.add(this.clusters)\n          axios.post(`${this.$store.state.backendUrl}/map/some/`,{\n            ids: this.points\n          }).then(response => {\n            for(let i=0;i<response.data.length;i++) response.data[i].datetime = formatedDateTime(response.data[i].datetime)\n            this.$emit('get-table',response.data)\n          })\n      })\n    }\n  }\n}\n</script>"]}]}