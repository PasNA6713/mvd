<template>
<div>
    <v-btn icon class="filter-icon"
    style="margin-left: 108px"
     @click.stop="drawer = !drawer">
      <v-icon>mdi-filter</v-icon>
    </v-btn>
  <v-card class="map-filter-container">
    <v-navigation-drawer
    fixed
    absolute
    temporary
    v-model="drawer"
    width="40vw"
    height="80vh"
    >
      <v-list
        dense
        nav
      >
        <v-list-item>
          <v-autocomplete class="map-filter__region"
            :items="filterData.region"
            v-model="chosedData.region"
            label="Регион"
          ></v-autocomplete>

        </v-list-item>
          <v-autocomplete class="map-filter__category"
            :items="filterData.category"
            v-model="chosedData.category"
            label="Категория"
            ></v-autocomplete>
        <v-list-item>
          <v-autocomplete class="map-filter__light"
            :items="filterData.light"
            v-model="chosedData.light"
            label="Освещение"
            ></v-autocomplete>
        </v-list-item>

        <v-list-item>
          <v-autocomplete class="map-filter__light"
            no-data-text="Введите целое число"
            :items="filterData.clusterQuontity"
            v-model="chosedData.clusterQuontity"
            label="Количество кластеров"
          ></v-autocomplete>
        </v-list-item>
            
        <v-list-item>
          <v-menu
            ref="menu"
            v-model="menu"
            :close-on-content-click="false"
            :return-value.sync="date"
            transition="scale-transition"
            offset-y
            min-width="auto"
            >
            <template v-slot:activator="{ on, attrs }">
              <v-text-field
                v-model="chosedData.date"
                label="Picker in menu"
                prepend-icon="mdi-calendar"
                readonly
                v-bind="attrs"
                v-on="on"
              ></v-text-field>
            </template>
            <v-date-picker
              v-model="chosedData.date"
              :color="theme.color"
              width="600px"
              range
              locale="ru"
              no-title
              scrollable
              :show-current="false"
            >
              <v-spacer></v-spacer>
              <v-btn
                text
                color="primary"
                @click="menu = false"
              >
                Cancel
              </v-btn>
              <v-btn
                text
                color="primary"
                @click="$refs.menu.save(date)"
              >
                OK
              </v-btn>
            </v-date-picker>
          </v-menu>
        </v-list-item>    
        
        <v-list-item>
          <v-slider
          :tick-labels="filterData.sliderTicks"
          :max="4"
          :thumb-size="1000"
          step="1"
          ticks="always"
          tick-size="3"
          v-model="chosedData.timeGroup">
          </v-slider>
        </v-list-item>

        <v-list-item>
          <div class="filter-buttons">
            <v-btn class="filter-buttons__button" color="#EDAC48" @click="clearForm">Очистить фильтр</v-btn>
            <v-btn class="filter-buttons__button" color="#EDAC48" @click="getData">Показать на карте</v-btn>
          </div>
        </v-list-item>
      </v-list>
    </v-navigation-drawer>
  </v-card>
</div>
</template>

<style lang="scss" scoped>
@import '@/styles/common.scss';
@import '@/styles/components/map-filter.scss';
</style>

<script>
export default {
  name: "MapFilter",
  props: {
    theme: Object
  },
  data() {
    return {
      filterData: {
        region: [],
        light: [],
        category: [],
        sliderTicks: [
          "Все время",
          "2.00 - 11.00", "11.00 - 16.00", 
          "16.00 - 21.00", "21.00 - 2.00"
        ],
        clusterQuontity: []
      },

      chosedData: {
        date: ["", ""],
        timeGroup: 0,
        region: "",
        light: "",
        category: "",
        clusterQuontity: 1
      },

      date: new Date().toISOString().substr(0, 10),
      menu: false,
      drawer: false,
      // modal: false,
      // menu2: false,
    }
  },

  computed: {
    filterParams() {
      let filterData = {
        region: this.chosedData.region,
        light: this.chosedData.light,
        category: this.chosedData.category,
        datetime_before: (this.chosedData.date[1]) ? `${this.chosedData.date[1]}T00:00:00Z` : "", 
        datetime_after: (this.chosedData.date[0]) ? `${this.chosedData.date[0]}T00:00:00Z` : "",
        time_group: this.chosedData.timeGroup,
        cluster_quontity: this.chosedData.clusterQuontity
      }
      return filterData
    }
  },

  methods: {
    async getFilterData() {
      await axios.get(`${this.$store.state.backendUrl}/map/get-filter-params/region/`
      ).then(response => { this.filterData.region = response.data })

      await axios.get(`${this.$store.state.backendUrl}/map/get-filter-params/category/`
      ).then(response => { this.filterData.category = response.data })

      await axios.get(`${this.$store.state.backendUrl}/map/get-filter-params/light/`
      ).then(response => { this.filterData.light = response.data })

      for(let i=1; i<=10;i++){
        this.filterData.clusterQuontity.push(i)
      }
    },

    getData() {
      this.$emit("get-data", this.filterParams)
    },

    clearForm() {
        this.chosedData.region = ""
        this.chosedData.light = ""
        this.chosedData.category = ""
        this.chosedData.timeGroup = 0
        this.chosedData.date = ["", ""] 
    },
  },

  created() {
    this.getFilterData()
  }
}
</script>